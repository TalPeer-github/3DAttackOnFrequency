# How to start? 
1. Connect to GPU: srun --gres=gpu:3 --pty bash

2. Mamba environment: mamba activate finalproj

3. Generate point cloud dataset:
   python dataset_prepare.py modelnet40_normal_resampled
   Output: .npz files describing raw point clouds in datasets_processed/modelnet40_normal_resampled/.

4. Generate random walks:
   python save_walk_as_npz.py --dataset train
   python save_walk_as_npz.py --dataset test
   Output: .npz files describing walks on PCs in pre_created_walks/train/ and pre_created_walks/test/
   You can explore the data in playground/try.py to understand shapes.

5. Train CloudWalker model:
   python train_cloudwalker.py
   Output: Saves model checkpoints to saved_checkpoints/cloudwalker/
   - Training runs for 50 epochs with the original successful configuration:
     * Learning rate: 0.001
     * LR scheduler: Step decay with factor 0.7 every 2000 steps
     * Higher dropout (0.3) for generalization
   - Checkpoints saved every 5 epochs
   - Best model saved to best_model.pth

6. Evaluate CloudWalker model:
   python evaluate_cloudwalker.py
   Output: Evaluation metrics and confusion matrix in saved_checkpoints/cloudwalker/evaluation/
   Note: By default, it uses the best model from saved_checkpoints/cloudwalker/best_model.pth
   You can specify a different checkpoint with --model_path

7. Attack a single point cloud:
   python attack_single_pc.py --id <model_id>
   Example: python attack_single_pc.py --id airplane_0521
   Output: Adversarial point cloud saved to attacks/cloudwalker/<model_id>_attacked.npz
   
   Additional options:
   --visualize: Generate visualizations of the attack
   --epsilon <value>: Set maximum perturbation magnitude (default: 0.05)
   --iterations <value>: Set number of attack iterations (default: 200)

8. Attack multiple point clouds:
   python attack_pc.py
   Output: Adversarial point clouds for all models in selected categories

# Alternative: Run the complete pipeline
python run_all.py

Options:
--skip_walk_generation: Skip the random walk generation step
--skip_training: Skip the model training step
--attack_only: Only run the adversarial attack
--attack_model_id <model_id>: Attack a specific model ID
--visualize_attack: Generate visualizations of the attack

# Git commands
git status
git branch
git checkout idan
git add .
git commit -m "comment"
git push origin idan

# Kaggle API-key 
{"username":"idancoh30","key":"0d71d81c66f5faf2e7d25fce282c3e8c"} - kaggle api

